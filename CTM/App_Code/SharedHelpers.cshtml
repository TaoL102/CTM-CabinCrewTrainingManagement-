@inherits CTM.App_Code.HelperPage
@using System.Dynamic
@using System.Web.Mvc
@using System.Web.Mvc.Ajax
@using System.Web.Mvc.Html
@using System.Web.Routing
@using CTMLib.CustomControls
@using CTMLib.CustomControls.Button
@using CTMLib.Extensions
@using CTMLib.Helpers
@using log4net.Util.TypeConverters


<!-- #region Text_Box_AutoComplete -->

@helper Text_Box_AutoComplete(string name, string id, string labelText, string placeholder)
        {
if (!string.IsNullOrEmpty(labelText))
{
        @Html.Label(labelText, labelText, new { @for = id })
}

    @Html.TextBox(name, null, new { @class = ConstantHelper.CssTextBoxAutoComplete, id = id, placeholder = placeholder ?? "" })

}
<!-- #endregion -->
<!-- #region Date_Picker -->

@helper Date_Picker(string name, string id, string labelText)
        {
if (!string.IsNullOrEmpty(labelText))
{
        @Html.Label(labelText, labelText, new { @for = id })
}
    <input class="datepicker" id=@id name=@name type="date">

}
<!-- #endregion -->
<!-- #region DropDown_List -->

@helper DropDown_List(string name, string id, string labelText, string optionLabel, IEnumerable<System.Web.Mvc.SelectListItem> selectList)
        {

if (!string.IsNullOrEmpty(labelText))
{
        @Html.Label(labelText, labelText, new { @for = id })
}
    @Html.DropDownList(name, (SelectList)selectList, optionLabel ?? "", htmlAttributes: new { id = id })
}
<!-- #endregion -->
<!-- #region Check_Box -->
@helper Check_Box(string name, string id, string labelText)
        {

    <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for=@id>
        <input type="checkbox" id=@id class="mdl-checkbox__input" value="true" name=@name>
        <input type="hidden" value="false" name=@name />
        <span class="mdl-checkbox__label">@labelText</span>
    </label>
}
<!-- #endregion -->
<!-- #region Button_Default -->
@helper Button_Default(string value, string id, string materialIconName, object htmlAttributes, bool isSubmit)
        {

// Add default button css class
var htmlAttributesDic = HtmlHelperExtension.AddCssClass(htmlAttributes, ConstantHelper.CssBtnDefault);
htmlAttributesDic.Add("id", id);

    @Html.Button().SetText(value).SetMaterialIcon(materialIconName).IsSubmitBtn(isSubmit).SetAttributes(htmlAttributesDic)
}
<!-- #endregion -->
<!-- #region Button_Icon -->
@helper Button_Icon(string value, string id, string materialIconName, object htmlAttributes, bool isSubmit = false, bool isLinkBtn = false)
{
// Add default button css class
var htmlAttributesDic = HtmlHelperExtension.AddCssClass(htmlAttributes, ConstantHelper.CssBtnIcon);
    htmlAttributesDic.Add("id",id);

    @Html.Button().SetText(value).SetMaterialIcon(materialIconName).IsSubmitBtn(isSubmit).IsLinkBtn(isLinkBtn).SetAttributes(htmlAttributesDic)
}
<!-- #endregion -->


