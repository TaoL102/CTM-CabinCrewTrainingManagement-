@using CTM.Codes.CustomControls.Shared
@using CTMLib.CustomControls
@using CTMLib.Extensions
@using CTMLib.Resources

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ConstSettings.WebAppName</title>
    @Styles.Render("~/bundles/bundleCss")
    @Styles.Render("~/bundles/bundleCustomizedCSS")
    @Scripts.Render("~/bundles/bundleModernizr")
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
          rel="stylesheet">
</head>
<body>

<nav class="navbar navbar-default navbar-fixed-top">
    <!-- #region Alert -->

    @Html.Alert(text: "").SetId("alert").SetColor(ColorOptions.Warning)

    <!-- #endregion -->
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="@Url.Action("Index", "Home", new {area = "Home"})">
                @*<img alt="Brand" src="~/Images/logo_westair.gif" style="height: 30px;">*@
                CTM
            </a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav"></ul>

            <ul class="nav navbar-nav navbar-right">
                @* English *@
                <li class="dropdown @(Html.IsActiveLink("Search", "EnglishTests", "Index") ? "active" : "")">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                        @ConstModels.EnglishTest
                    </a>
                    <ul class="dropdown-menu">
                        <li>
                            @Html.ActionLink(ConstViews.BTN_Search, "Index", "EnglishTests", new { area = "Search" }, null)
                        </li>
                        <li>
                            @Ajax.Button("Upload", "EnglishTests", "ManageData").IsLinkBtn(true).SetText(ConstViews.BTN_Upload).SetOnSuccessFun("openMidSizeModal").SetUpdateTargetId("mid_size_modal_content")
                            
                        </li>
                        <li>
                            @Ajax.Button("Create", "EnglishTests","ManageData").IsLinkBtn(true).SetText(ConstViews.BTN_Add).SetOnSuccessFun("openMidSizeModal").SetUpdateTargetId("mid_size_modal_content")
                        </li>

                    </ul>
                </li>

                

                <li class="@(Html.IsActiveLink("Search", "RefresherTrainings", "Index") ? "active" : "")">
                    @Html.ActionLink(ConstModels.RefresherTraining, "Index", "RefresherTrainings", new {area = "Search"}, null)
                </li>
                @Html.Partial("_LoginPartial")
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
    <!--Progress bar-->
    <div id="loader" class="progress" style="display: none">
        <div class="indeterminate"></div>
    </div><!--/.Progree bar-->
</nav>
    <div style="margin-top: 80px; ">

            @RenderBody()

    </div>
    <div class="footer" style="background-color: grey; ">
        @{
            var curCulture = Request.Cookies["culture"]?.Value.ToString();
            string culture = "en-NZ";
            string displayText = "EN";
            string returnUrl = Request.Url.AbsoluteUri;
            bool isCurEnglish = curCulture == null || curCulture.Substring(0, 2).ToLower() == "en";
            if (isCurEnglish)
            {
                culture = "zh-CN";
                displayText = "中";
            }
        }
        @using (Html.BeginForm("ChangeLanguage", "Account", new { area = "ManageAccount", culture, returnUrl }, FormMethod.Post))
        {
            @Html.Button().SetText(displayText).SetColor(ColorOptions.Default).IsSubmitBtn(true)
        }
    </div>

    @* -- Loader Start -- *@

    @*<svg id="loader" class="spinner" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
            <circle class="path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
        </svg>*@


    @* -- Loader End -- *@

    <!-- #region Message_box_modal -->

    @Html.MsgModal()

    <!-- #endregion -->
    <!-- #region mid_size_modal -->

    @Html.DisplayModal()

    <!-- #endregion -->


    @Scripts.Render("~/bundles/bundleJquery")
    @Scripts.Render("~/bundles/bundleBootstrap")
    @Scripts.Render("~/bundles/bundleCustomizedJS")
    @RenderSection("scripts", required: false)
</body>
</html>


<script>
    //Reference：http://stackoverflow.com/questions/7247250/jquery-validation-not-waiting-for-remote-validation-to-return-true-considers-fo
    $.validator.addMethod("iscabincrew", function (value, element, param) {
        if (this.optional(element)) {
            return "dependency-mismatch";
        }
        if (!value.match(/[\u4E00-\u9FFF\u3400-\u4DFF\uF900-\uFAFF]+/g)) {
            return false;
        }

        var previous = this.previousValue(element);
        if (!this.settings.messages[element.name]) {
            this.settings.messages[element.name] = {};
        }
        previous.originalMessage = this.settings.messages[element.name].remote;
        this.settings.messages[element.name].remote = previous.message;

        param = typeof param === "string" && { url: param } || param;

        if (previous.old === value) {
            return previous.valid;
        }

        previous.old = value;
        var validator = this;
        this.startRequest(element);
        var data = {};
        data["names"] = value;
        var valid = "pending";
        $.ajax($.extend(true, {
            url: "@Url.Action("IsValidCabinCrew", "Validate", new { area = "API" })",
            async: false,
            mode: "abort",
            port: "validate" + element.name,
            data: data,
            success: function (response) {
                validator.settings.messages[element.name].remote = previous.originalMessage;
                valid = response === true || response === "True";
                if (valid) {
                    var submitted = validator.formSubmitted;
                    validator.prepareElement(element);
                    validator.formSubmitted = submitted;
                    validator.successList.push(element);
                    delete validator.invalid[element.name];
                    validator.showErrors();
                } else {
                    var errors = {};
                    var message = response || validator.defaultMessage(element, "remote");
                    errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                    validator.invalid[element.name] = true;
                    validator.showErrors(errors);
                }
                previous.valid = valid;
                validator.stopRequest(element, valid);
            }
        }, param));
        return valid;
    });

    $.validator.unobtrusive.adapters.add("iscabincrew", [], function (options) {
        options.rules["iscabincrew"] = true;
        options.messages["iscabincrew"] = options.message;
    });

    //$("#CCName")
    //    .validate({
    //        onkeyup: false,
    //        onclick: false
    //        // rules omitted for brevity
    //    });

    // Methods
    // Event handler when mid size modal is opened.
    function openMidSizeModal() {
        // Open
        $("#mid_size_modal").modal();
        openModal("mid_size_modal", true);
    };
    function openMsgModal() {
        // Open
        $("#msg_modal").modal();
    };
    function CloseModal() {
        // Close
        $(".modal").modal("hide");
    };

    $(function () {
        // Islatest checkbox
        $(".material-switch > label").on("click",
            function () {
                var value = $(this).prev().attr("value");
                var hidableDivId = $(this).prev().data("hidabledivid");
                console.log(hidableDivId);
                if (value!=="true") {
                    $(this).prev().attr("value", "true");
                    $("#" + hidableDivId).hide();
                } else {
                    $(this).prev().attr("value", "false");
                    $("#" + hidableDivId).show();
                }
            });

        // Hidable divs
        var ids = $("input[type='checkbox'][value='true'][data-hidabledivid]").data("hidabledivid");
            $("#" + ids).hide();

        // Register
        $(".datepicker").datepicker(
        {
            showOtherMonths: true,
            selectOtherMonths: true,
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
        });

        // Del btn click event
        $('#message_box_modal').on("show.bs.modal", function (e) {
            var $invoker = $(e.relatedTarget);
            console.log($invoker);
            $('#message_box_modal').find('.btn-yes').attr('data-url', $invoker.data('url')).attr('data-rowid', $invoker.data('rowid'));

        });


        // Modal del confirm button click event
        $(".btn-yes").on("click",
            function () {
                var data_url = $(this).data("url");
                var data_rowid = $(this).data("rowid");
                $.ajax({
                    type: "GET",
                    url: data_url
                }).done(function (data) {

                    // Del the row if qurested

                    console.log(data_rowid);
                    if (data_rowid !== "undefined") {
                        // If row id is defined,delete the row
                        console.log($("#" + data_rowid));
                        $("#" + data_rowid).css("display", "none");
                    }

                }).fail(function () {
                    console.log("ajax failed");
                });
            });

        // Search button click event
        // Clear current search result
        $(".search_btn").on("click",
            function () {
                $("#search_result_table").empty();
            });



        // Autocomplete
        // Reference: https://jqueryui.com/autocomplete/
        var cache = {};
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }


        $("#CCName")
            // don't navigate away from the field on tab when selecting an item
            .on("keydown",
                function (event) {
                    if (event.keyCode === $.ui.keyCode.TAB &&
                        $(this).autocomplete("instance").menu.active) {
                        event.preventDefault();
                    }
                })

            .autocomplete({
                    delay: 100,
                    source: function (request, response) {
                        var query = extractLast(request.term);
                        // Search cache first
                        if (query in cache) {
                            response(cache[query]);
                            return;
                        }

                        // Then ajax
                        $.ajax({
                            url: "@Url.Action("GetCabinCrewNames","Query", new { area = "API" })",
                            data: { name: query },
                            dataType: "json",
                            success: function (data, status, xhr) {
                                cache[query] = data;
                                response(data);
                            },
                            error: function () {
                                response([]);
                            }
                        });
                    },
                    classes: {
                        "ui-autocomplete": "form-autocompelete-menu"
                    },

                    search: function (event, ui) {
                        console.log($(event.delegateTarget));
                        // custom minLength
                        var term = extractLast(this.value);
                        if (term.length < 1) {
                            return false;
                        }
                        if (!$(event.delegateTarget).val().match(/[\u4E00-\u9FFF\u3400-\u4DFF\uF900-\uFAFF]+/g)) {
                            event.preventDefault();
                            return false;
                        }
                    },

                    minLength: 1,
                    focus: function () {
                        // prevent value inserted on focus
                        return false;
                    },
                    select: function (event, ui) {
                        var terms = split(this.value);
                        // remove the current input
                        terms.pop();
                        // add the selected item
                        terms.push(ui.item.value);
                        // add placeholder to get the comma-and-space at the end
                        terms.push("");
                        this.value = terms.join(", ");
                        return false;
                    }

                }
            );


        // AJAX Global Settings

        $(document).bind("ajaxStart",
            function () {
                $("#loader").show();
            });

        $(document).bind("ajaxSuccess", function () {
            $("#loader").hide();
        });




        $(document).bind("ajaxError", function (event, jqxhr, settings) {

            console.log(jqxhr);
            console.log(settings);
            // If server effor:
            if (jqxhr.status === 500) {
                showAlert(jqxhr.responseText, "danger");
            } else {
                showAlert(jqxhr.statusText);
            }
        });



    });


</script>